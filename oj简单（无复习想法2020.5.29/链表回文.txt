https://www.nowcoder.com/practice/d281619e4b3e4a60a2cc66ea32855bfa?tpId=49&&tqId=29370&rp=1&ru=/activity/oj&qru=/ta/2016test/question-ranking


/*
struct ListNode {
    int val;
    struct ListNode *next;
    ListNode(int x) : val(x), next(NULL) {}
// };*/
// class PalindromeList {
// public:
//     bool chkPalindrome(ListNode* A) {
//         if(NULL==A)
//         {
//             return false;
//         }
//         ListNode*left=A;
//         int i=0,mid=0;
//         for(i=-1;left;i++)//数元素个数
//         {
//             left=left->next;
//         }
//         left=A;
//         mid=(i/2)+1;
//         for(i=0;i<mid;i++)//找到左半边第一个地址
//         {
//             left=left->next;
//         }
//         ListNode*cur=left->next,*next;
//         left=NULL;
//         while(cur)//倒转后半段链表
//         {
//             next=cur->next;
//             cur->next=left;
//             left=cur;
//             cur=next;
//         }
        
//         while(left)
//         {
//             if(left->val!=A->val)
//             {
//                 return false;
//             }
//             left=left->next;
//             A=A->next;
//         }
// return true;
//         // write code here
//     }
// };
ListNode* mid(ListNode*phead)
{
    if(NULL==phead)
    {
        return NULL;
    }
    ListNode * fast=phead,*low=phead;
    while(fast&&fast->next)
    {
        fast=fast->next->next;
        low=low->next;
    }
    return low;
}
class PalindromeList {
public:
    bool chkPalindrome(ListNode* A) {
        if(NULL==A)
        {
            return false;
        }
        ListNode*right=A;
        right=mid(right);
        ListNode*cur=right->next,*next;
        right=NULL;
        while(cur)//倒转后半段链表
        {
            next=cur->next;
            cur->next=right;
            right=cur;
            cur=next;
        }
        
        while(right)
        {
            if(right->val!=A->val)
            {
                return false;
            }
            right=right->next;
            A=A->next;
        }
return true;
        // write code here
    }
};

